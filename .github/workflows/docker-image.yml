name: Build and Push Docker Image

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  build-and-push:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js environment to run tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run tests and fail pipeline if tests fail
      - name: Run tests
        run: npm run test

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_HUB_REPO }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_HUB_REPO }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_HUB_REPO }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_HUB_REPO }}:cache,mode=max

      - name: SSH and Deploy on EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_HUB_REPO }}:${{ github.sha }}"
            CONTAINER_NAME=$(basename "$IMAGE_NAME" | cut -d':' -f1)  # Extract "docker repo name" as container name

            # Pull the latest image from Docker Hub
            docker pull "$IMAGE_NAME"

            # Stop and remove the current container if it's running
            docker stop "$CONTAINER_NAME" || true
            docker rm "$CONTAINER_NAME" || true

            # Run a new container with the latest image
            docker run -d --name "$CONTAINER_NAME" -p 80:3000 "$IMAGE_NAME"

      # Optional: Add any cleanup steps or notifications here
